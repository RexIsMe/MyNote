package understandingthejvm.classloader;

/**
 * jvm类加载机制
 * https://www.cnblogs.com/chanshuyi/p/jvm_serial_07_jvm_class_loader_mechanism.html
 *
 * JVM 虚拟机执行 class 字节码的过程可以分为七个阶段：
 * 【1、加载：将字节码加载到内存中】
 * 【2、验证：①验证是否符合jvm规范 ②验证java语法】
 * 【3、准备：①为“类对象”分配内存 ②类对象的初始化（赋零值），static final修饰的常量跳过赋零值，赋最终值，以为final的特性】
 * 【4、解析：将字节码中的引用替换为对应的内存地址的引用】
 * 【5、初始化：按从上到下的顺序为类对象赋值】
 * 【6、执行：上述阶段准备完成后，执行代码逻辑】
 * 【7、卸载：程序执行结束后，jvm销毁创建的对象，最终jvm也退出执行】
 *
 * 方法论
 * 从上面几个例子可以看出，分析一个类的执行顺序大概可以按照如下步骤：
 *
 * 确定类变量的初始值。在类加载的准备阶段，JVM 会为类变量初始化零值，这时候类变量会有一个初始的零值。如果是被 final 修饰的类变量，则直接会被初始成用户想要的值。
 * 初始化入口方法。当进入类加载的初始化阶段后，JVM 会寻找整个 main 方法入口，从而初始化 main 方法所在的整个类。当需要对一个类进行初始化时，会首先初始化类构造器（），之后初始化对象构造器（）。
 * 初始化类构造器。JVM 会按顺序收集类变量的赋值语句、静态代码块，最终组成类构造器由 JVM 执行。
 * 初始化对象构造器。JVM 会按照收集成员变量的赋值语句、普通代码块，最后收集构造方法，将它们组成对象构造器，最终由 JVM 执行。
 * 如果在初始化 main 方法所在类的时候遇到了其他类的初始化，那么就先加载对应的类，加载完成之后返回。如此反复循环，最终返回 main 方法所在类。
 *
 *
 * @Author li zhiqang
 * @create 2021/2/2
 */
public class Common {



}
